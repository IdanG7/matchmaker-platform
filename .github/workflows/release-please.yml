name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          # Use config files for customization
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

      # The release-please action creates a PR when there are conventional commits
      # When you merge that PR, it creates a tag and GitHub release
      # This output lets us know if a release was created
      - name: Output release info
        if: steps.release.outputs.release_created
        run: |
          echo "Release created: ${{ steps.release.outputs.tag_name }}"
          echo "Upload artifacts to: ${{ steps.release.outputs.upload_url }}"
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build-sdk:
    name: Build SDK - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: release-please
    if: needs.release-please.outputs.release_created
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux-x64
            artifact_name: game-sdk-linux-x64.tar.gz
          - os: macos-latest
            platform: macos-x64
            artifact_name: game-sdk-macos-x64.tar.gz

    steps:
      - uses: actions/checkout@v4

      - name: Get version from release
        id: version
        run: |
          VERSION="${{ needs.release-please.outputs.tag_name }}"
          echo "SDK Version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libssl-dev zlib1g-dev

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake

      - name: Build SDK
        run: |
          cd sdk/cpp
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=OFF -DBUILD_EXAMPLES=OFF
          cmake --build build --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu)

      - name: Package SDK
        run: |
          cd sdk/cpp
          mkdir -p package/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}

          # Copy library
          cp build/libgame-sdk.a package/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/

          # Copy headers
          cp -r include package/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/

          # Copy documentation
          cp USAGE.md package/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/
          cp ../../README.md package/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/
          cp ../../LICENSE package/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/ 2>/dev/null || echo "No LICENSE file"

          # Create README for the package
          cat > package/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/README.txt << 'EOF'
          # Game SDK ${{ steps.version.outputs.version }}

          ## Installation

          1. Extract this archive to your project directory
          2. In your CMakeLists.txt:

          ```cmake
          # Add SDK include directory
          include_directories(/path/to/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/include)

          # Link against the SDK library
          target_link_libraries(your_game PRIVATE
              /path/to/game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}/libgame-sdk.a
              ssl crypto z pthread  # Required dependencies
          )
          ```

          3. See USAGE.md for API documentation and examples

          ## Contents

          - libgame-sdk.a     - Static library
          - include/          - Header files
          - USAGE.md          - Complete usage guide with examples
          - README.md         - Project documentation

          ## Requirements

          - C++17 compatible compiler
          - OpenSSL (libssl-dev on Ubuntu, openssl on macOS)
          - zlib (zlib1g-dev on Ubuntu, included on macOS)

          ## Quick Start

          See USAGE.md for complete examples of:
          - Authentication
          - Party creation and management
          - Real-time WebSocket events
          - Matchmaking queue

          ## Support

          - GitHub: https://github.com/idang7/matchmaker-platform
          - Issues: https://github.com/idang7/matchmaker-platform/issues
          EOF

          # Create tarball
          cd package
          tar -czf ../${{ matrix.artifact_name }} game-sdk-${{ steps.version.outputs.version }}-${{ matrix.platform }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-sdk
          path: sdk/cpp/${{ matrix.artifact_name }}

  upload-assets:
    name: Upload SDK Assets to Release
    runs-on: ubuntu-latest
    needs: [release-please, build-sdk]
    if: needs.release-please.outputs.release_created
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload SDK binaries to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: |
            artifacts/linux-x64-sdk/game-sdk-linux-x64.tar.gz
            artifacts/macos-x64-sdk/game-sdk-macos-x64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
