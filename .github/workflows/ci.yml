name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'release-please--**'
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io

jobs:
  validate-commits:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate conventional commits
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: .commitlintrc.json

  lint-python:
    name: Python Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 bandit

      - name: Run Black formatter check
        run: black --check services/ tests/

      - name: Run Flake8 linter
        run: flake8 services/ tests/ --max-line-length=100 --extend-ignore=E203,W503

      - name: Run Bandit security scanner
        run: bandit -r services/ -ll -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  test-python:
    name: Python Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: game
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10-alpine
        ports:
          - 4222:4222

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r services/api/requirements.txt

      - name: Initialize database schema
        env:
          PGPASSWORD: password
        run: |
          psql -h localhost -U postgres -d game -f db/migrations/init.sql

      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/game
          REDIS_URL: redis://localhost:6379/0
          NATS_URL: nats://localhost:4222
          PYTHONPATH: services/api
          JWT_SECRET_KEY: test-secret-key-for-ci-testing-must-be-at-least-32-chars
        run: |
          pytest services/api/tests -v --cov=services/api --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build-matchmaker:
    name: Build & Test C++ Matchmaker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libgtest-dev

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: services/matchmaker/build
          key: ${{ runner.os }}-matchmaker-${{ hashFiles('services/matchmaker/CMakeLists.txt') }}

      - name: Configure CMake
        run: |
          cd services/matchmaker
          cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build Matchmaker
        run: |
          cd services/matchmaker
          cmake --build build --parallel $(nproc)

      - name: Run Matchmaker tests
        run: |
          cd services/matchmaker
          ctest --test-dir build --output-on-failure --verbose

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: matchmaker-test-results
          path: services/matchmaker/build/Testing/

  build-sdk:
    name: Build & Test C++ SDK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libgtest-dev libssl-dev zlib1g-dev

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: sdk/cpp/build
          key: ${{ runner.os }}-sdk-${{ hashFiles('sdk/cpp/CMakeLists.txt') }}

      - name: Configure CMake
        run: |
          cd sdk/cpp
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON

      - name: Build SDK
        run: |
          cd sdk/cpp
          cmake --build build --parallel $(nproc)

      - name: Run SDK unit tests
        run: |
          cd sdk/cpp/build
          ./tests/sdk_tests

      - name: Upload SDK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sdk-binaries
          path: |
            sdk/cpp/build/libgame-sdk.a
            sdk/cpp/build/examples/party_test
            sdk/cpp/build/tests/sdk_tests

  integration-test:
    name: Integration Tests (Full Stack)
    runs-on: ubuntu-latest
    needs: [test-python, build-matchmaker, build-sdk]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "JWT_SECRET_KEY=test-secret-key-for-ci-testing-must-be-at-least-32-chars" >> .env

      - name: Start all services
        run: |
          docker compose -f deployments/docker/docker-compose.yml up -d --build

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 60 bash -c 'until docker compose -f deployments/docker/docker-compose.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'

      - name: Wait for Redis to be ready
        run: |
          echo "Waiting for Redis..."
          timeout 60 bash -c 'until docker compose -f deployments/docker/docker-compose.yml exec -T redis redis-cli ping | grep -q PONG; do sleep 2; done'

      - name: Wait for NATS to be ready
        run: |
          echo "Waiting for NATS..."
          sleep 5

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API service..."
          timeout 60 bash -c 'until curl -sf http://localhost:8080/docs > /dev/null; do sleep 2; echo "API not ready yet..."; done'
          echo "✅ API is ready!"

      - name: Initialize database schema
        run: |
          echo "Initializing database schema..."
          docker compose -f deployments/docker/docker-compose.yml exec -T postgres psql -U postgres -d game -f - < db/migrations/init.sql
          echo "✅ Database schema initialized!"

      - name: Verify database schema
        run: |
          echo "Checking database schema..."
          docker compose -f deployments/docker/docker-compose.yml exec -T postgres psql -U postgres -d game -c "\dt game.*" || echo "Schema check completed"

      - name: Check service health
        run: |
          docker compose -f deployments/docker/docker-compose.yml ps
          echo "Testing API health endpoint..."
          curl -f http://localhost:8080/docs
          echo "✅ All services are healthy!"

      - name: Run integration tests
        run: |
          pip install pytest pytest-asyncio httpx
          pytest tests/integration/ -v --tb=short

      - name: Test API endpoints
        run: |
          echo "Testing registration..."
          REGISTER_RESPONSE=$(curl -s -X POST http://localhost:8080/v1/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email":"citest@example.com","username":"ciuser","password":"testpass123","region":"us-west"}')
          echo "Registration response: $REGISTER_RESPONSE"

          echo "Testing login..."
          LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8080/v1/auth/login \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"testpass123"}')
          echo "Login response: $LOGIN_RESPONSE"

          # Extract token
          TOKEN=$(echo $LOGIN_RESPONSE | python3 -c "import sys, json; print(json.load(sys.stdin).get('access_token', ''))" 2>/dev/null || echo "")

          if [ -n "$TOKEN" ]; then
            echo "✅ Authentication successful!"
            echo "Testing profile endpoint..."
            curl -f -H "Authorization: Bearer $TOKEN" http://localhost:8080/v1/profile/me
            echo ""
            echo "✅ All API endpoint tests passed!"
          else
            echo "❌ Failed to get authentication token"
            echo "Login response: $LOGIN_RESPONSE"
            exit 1
          fi

      - name: Show service logs on failure
        if: failure()
        run: |
          docker compose -f deployments/docker/docker-compose.yml logs --tail=100

      - name: Cleanup
        if: always()
        run: |
          docker compose -f deployments/docker/docker-compose.yml down -v

  sdk-integration-test:
    name: SDK End-to-End Test
    runs-on: ubuntu-latest
    needs: [build-sdk]
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libssl-dev zlib1g-dev

      - name: Build SDK
        run: |
          cd sdk/cpp
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel $(nproc)

      - name: Create .env file
        run: |
          cp .env.example .env
          echo "JWT_SECRET_KEY=test-secret-key-for-ci-testing-must-be-at-least-32-chars" >> .env

      - name: Start backend services
        run: |
          docker compose -f deployments/docker/docker-compose.yml up -d

      - name: Wait for PostgreSQL
        run: |
          timeout 60 bash -c 'until docker compose -f deployments/docker/docker-compose.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'

      - name: Wait for Redis
        run: |
          timeout 60 bash -c 'until docker compose -f deployments/docker/docker-compose.yml exec -T redis redis-cli ping | grep -q PONG; do sleep 2; done'

      - name: Wait for API to be ready
        run: |
          timeout 90 bash -c 'until curl -sf http://localhost:8080/docs > /dev/null; do sleep 2; echo "Waiting for API..."; done'
          echo "✅ Backend is ready for SDK testing"

      - name: Initialize database schema
        run: |
          echo "Initializing database schema..."
          docker compose -f deployments/docker/docker-compose.yml exec -T postgres psql -U postgres -d game -f - < db/migrations/init.sql
          echo "✅ Database schema initialized!"

      - name: Run SDK party test
        run: |
          cd sdk/cpp/build
          timeout 45 ./examples/party_test
          echo "✅ SDK E2E test passed!"

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose -f deployments/docker/docker-compose.yml logs

      - name: Cleanup
        if: always()
        run: |
          docker compose -f deployments/docker/docker-compose.yml down -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-python, build-matchmaker]
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./services/api
          file: ./services/api/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint-python, test-python, build-matchmaker, build-sdk, integration-test, sdk-integration-test]
    if: always()
    steps:
      - name: Check build status
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Python linting: ${{ needs.lint-python.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Python tests: ${{ needs.test-python.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ C++ Matchmaker: ${{ needs.build-matchmaker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ C++ SDK: ${{ needs.build-sdk.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Integration tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ SDK integration: ${{ needs.sdk-integration-test.result }}" >> $GITHUB_STEP_SUMMARY
